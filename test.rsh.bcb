'reach 0.1';

const User = {
    ...hasRandom,
    donationAmt:UInt,
    getContractStatus: Fun([], Bool),
}

//var school_project_votes = 0
//var road_project_votes = 0

export const main = Reach.App(()=> {

    //ToDo: Pull partipants from mongo database
    //but for now just create four participants Genesis, Prince,Jazz,Kip

    // //the partipant Genesis is the initializer of the contract itself
    // const Genesis = Participant('Genesis', {
    //     ...User,
    // })

    //The other three partipants are actual application users
    const Prince = Participant('Prince', {
        ...User,
    })

    const Jazz = Participant('Jazz', {
        ...User,
    })

    const Kip = Participant('Kip', {
        ...User
    })    

    // now deploy the app to devnet
    init();

    Kip.only(()=> {
        const donationAmtKip = declassify(interact.donationAmt)
        // const deadline = declassify(interact.deadline)
    })

    Kip.publish(donationAmtKip)
        .pay(donationAmtKip)
    commit()

    Prince.only(()=> {
        const donationAmtPrince = declassify(interact.donationAmt)
        // const deadline = declassify(interact.deadline)
    })

    Prince.publish(donationAmtPrince)
        .pay(donationAmtPrince)
    //commit prince's step
    commit()

    Jazz.only(()=> {
        const donationAmtJazz = declassify(interact.donationAmt)
        // const deadline = declassify(interact.deadline)
    })

    Jazz.publish(donationAmtJazz)
        .pay(donationAmtJazz)
    
    //define while loop with Var and invariant declarations
    var contractIsAlive = true
    invariant( balance() == (donationAmtKip + donationAmtPrince + donationAmtJazz) )
    while(contractIsAlive){
        //since we are within a consesus step we can commit below
        commit() // commit Jazz's step here

        //this is Kip only step
        Kip.only(() => {
            const _contractStatus = interact.getContractStatus()
            const contractStatus = declassify(_contractStatus)
        })
        Kip.publish(contractStatus)
        
        //set contractStatus as contractIsAlive
        contractIsAlive = contractStatus
        //add continue in order to break the loop
        continue
    }
    
    //transfer all tokens back to its owners for now to allow code to compile
    transfer(donationAmtKip).to(Kip)
    transfer(donationAmtPrince).to(Kip)
    transfer(donationAmtJazz).to(Kip)
    //commit all the changes above
    commit()
});

